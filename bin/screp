#! /usr/bin/python
import sys
from optparse import OptionParser
import lxml.etree as etree
import lxml.html as html
from lxml.cssselect import CSSSelector

import screp
import screp.format_parsers
from screp.context import XMLContext


def get_formatter(options):
    if options.csv is not None:
        return screp.format_parsers.parse_csv_formatter(options.csv)

    raise ValueError('No format defined')


def parse_xml_data(options, data):
    parser = etree.HTMLParser()
    return etree.fromstring(data, parser)


def compute_value(options, substitor, context):
    try:
        return substitor.execute(context)
    except Exception as e:
        if options.stop_on_error:
            raise
        else:
            return options.null_value


def screp_file(options, selector, data):

    dom = parse_xml_data(options, data)

    (formatter, substitutors) = get_formatter(options)

    sel = CSSSelector(selector)

    for element in sel(dom):
        context = XMLContext(element, dom)
        print formatter.format_values(map(lambda s: compute_value(options, s, c)), substitutors)),


def parse_cli_options(argv):
    parser = OptionParser()

    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
            default=False, help='verbose')
    parser.add_option('-n', '--null-value', dest='null_value', action='store',
            default='NULL', help='value to print when a value cannot be computed')
    parser.add_option('-e', '--stop-on-error', dest='stop_on_error', action='store_true',
            default=False, help='stop on first error; inhibits --null-value')
    parser.add_option('-c', '--csv', dest='csv', action='store', default=None,
            help='print record as csv row')
#   parser.add_option('-H', '--csv-header', dest='csv_header', action='store',
#           default=None, help='print csv header')
#   parser.add_option('-j', '--json', dest='json', action='store',
#           default=None, help='print record as json object')
#   parser.add_option('-f', '--format', dest='format', action='store',
#           default=None, help='print record as custom format')
#   parser.add_option('-U', '--base-url', dest='base_url', action='store',
#           default=None, help='base url to use when computing absolute urls')

    (options, args) = parser.parse_args(argv)

    if len(args) == 0:
        parser.print_usage(sys.stderr)
        sys.exit(1)

    selector = args[0]

    if len(args) == 1:
        data = sys.stdin.read()
    else:
        with open(args[1], 'r') as f:
            data = f.read()

    return (parser, options, selector, data)


if __name__ == '__main__':
    (parser, options, selector, in_file) = parse_cli_options(sys.argv[1:])

    screp_file(options, selector, in_file)
